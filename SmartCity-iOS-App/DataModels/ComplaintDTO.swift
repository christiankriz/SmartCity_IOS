

//SWIFT SKELETON CLASS: ComplaintDTO
//Generated by Java2Swift on Sat Apr 23 10:25:46 SAST 2016

import Foundation
import Gloss
import ObjectMapper

class ComplaintDTO: Decodable, Mappable {

	// MARK: - Properties
	var complaintID: Int?
	var municipalityID: Int?
	var subCategoryID: Int?
	var id: Int?
	var numberOfFollowers: Int?
	var referenceNumber: String?
	var href: String?
	var stringDate: String?
	var remarks: String?
	var customerID: String?
	var address: String?
	var number: String?
	var street: String?
	var description: String?
	var suburb: String?
	var city: String?
	var category: String?
	var subCategory: String?
	var complaintDate: Int32?
	var latitude: Double?
	var longitude: Double?
	var distance: Double?
	var activeFlag: Bool?
	var profileInfo: ProfileInfoDTO?
	var user: UserDTO?
	var complaintType: ComplaintTypeDTO?
	var complaintImageList: Array<ComplaintImageDTO>?
	var complaintUpdateStatusList: Array<ComplaintUpdateStatusDTO>?

	// MARK: - functions to conform to ObjectMapper protocol Mappable
	required init?(_ map: Map) {
	}

	required init() {
	}

	func mapping(map: Map) {
		complaintID <- map["complaintID"]
		municipalityID <- map["municipalityID"]
		subCategoryID <- map["subCategoryID"]
		id <- map["id"]
		numberOfFollowers <- map["numberOfFollowers"]
		referenceNumber <- map["referenceNumber"]
		href <- map["href"]
		stringDate <- map["stringDate"]
		remarks <- map["remarks"]
		address <- map["address"]
		number <- map["number"]
		description <- map["description"]
		street <- map["street"]
		suburb <- map["suburb"]
		city <- map["city"]
		customerID <- map["customerID"]
		category <- map["category"]
		subCategory <- map["subCategory"]
		complaintDate <- map["complaintDate"]
		latitude <- map["latitude"]
		longitude <- map["longitude"]
		distance <- map["distance"]
		activeFlag <- map["activeFlag"]
		profileInfo <- map["profileInfo"]
		user <- map["user"]
		complaintType <- map["complaintType"]
		complaintImageList <- map["complaintImageList"]
		complaintUpdateStatusList <- map["complaintUpdateStatusList"]
	}

	// MARK: - functions to conform to Decodable
	required init?(json: JSON) {
		self.complaintID = "complaintID" <~~ json
		self.municipalityID = "municipalityID" <~~ json
		self.subCategoryID = "subCategoryID" <~~ json
		self.customerID = "customerID" <~~ json
		self.id = "id" <~~ json
		self.numberOfFollowers = "numberOfFollowers" <~~ json
		self.referenceNumber = "referenceNumber" <~~ json
		self.href = "href" <~~ json
		self.stringDate = "stringDate" <~~ json
		self.remarks = "remarks" <~~ json
		self.address = "address" <~~ json
		self.number = "number" <~~ json
		self.description = "description" <~~ json
		self.street = "street" <~~ json
		self.suburb = "suburb" <~~ json
		self.city = "city" <~~ json
		self.category = "category" <~~ json
		self.subCategory = "subCategory" <~~ json
		self.complaintDate = "complaintDate" <~~ json
		self.latitude = "latitude" <~~ json
		self.longitude = "longitude" <~~ json
		self.distance = "distance" <~~ json
		self.activeFlag = "activeFlag" <~~ json
		self.profileInfo = "profileInfo" <~~ json
		self.user = "user" <~~ json
		self.complaintType = "complaintType" <~~ json
		self.complaintImageList = "complaintImageList" <~~ json
		self.complaintUpdateStatusList = "complaintUpdateStatusList" <~~ json
	}
}
