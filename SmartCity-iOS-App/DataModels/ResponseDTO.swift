

//SWIFT SKELETON CLASS: ResponseDTO
//Generated by Java2Swift on Sat Apr 23 10:22:54 SAST 2016

import Foundation
import ObjectMapper
import Gloss

class ResponseDTO: Mappable, Decodable {

	// MARK: - API Server Message Constants

	let ERROR_IMAGE_UPLOAD: Int = 1000
	let ERROR_SERVER: Int = 1001
	let ERROR_DATABASE: Int = 1002
	let ERROR_IMAGE_JSON: Int = 1003
	let ERROR_PROPERTIES_FILE_UNAVAILABLE: Int = 1004
	let ERROR_REQUEST_NOT_MULTIPART: Int = 1005
	let ERROR_WEB_SOCKET: Int = 1006
	let ERROR_ZIPPING_RESPONSE: Int = 1007
	let ERROR_JSON_REQUEST_SYNTAX: Int = 1008

	// MARK: - Response Properties

	var statusCode: Int?
	var goodResponses: Int?
	var badResponses: Int?
	var message: String?
	var sessionID: String?
	var gcmRegistrationID: String?
	var log: String?
	var data: String?
	var requestResponseTimeSeconds: Double?
	var municipalityAccessFailed: Bool?
	var pdfFileNameList: Array<String>?
	var summaryList: Array<SummaryDTO>?
	var addressList: Array<String>?
	var alertList: Array<AlertDTO>?
	var userList: Array<UserDTO>?
	var accountList: Array<AccountDTO>?
	var profileInfoList: Array<ProfileInfoDTO>?
	var complaintTypeList: Array<ComplaintTypeDTO>?
	var complaintCategoryList: Array<ComplaintCategoryDTO>?
	var complaintList: Array<ComplaintDTO>?
	var alertTypeList: Array<AlertTypeDTO>?
	var cityList: Array<CityDTO>?
	var complaintUpdateStatusList: Array<ComplaintUpdateStatusDTO>?
	var countryList: Array<CountryDTO>?
	var customerStatusList: Array<CustomerStatusDTO>?
	var customerTypeList: Array<CustomerTypeDTO>?

	var municipalityList: Array<MunicipalityDTO>?

	var faqList: Array<FaqDTO>?
	var faqTypeList: Array<FreqQuestionTypeDTO>?
	var pdfHashMap: NSDictionary?

	init() {

	}
	// MARK: - function to conform to Decodable protocol

	required init?(json: JSON) {
		self.pdfHashMap = "pdfHashMap" <~~ json
		self.statusCode = "statusCode" <~~ json
		self.goodResponses = "goodResponses" <~~ json
		self.badResponses = "badResponses" <~~ json
		self.message = "message" <~~ json
		self.sessionID = "sessionID" <~~ json
		self.gcmRegistrationID = "gcmRegistrationID" <~~ json
		self.log = "log" <~~ json
		self.data = "data" <~~ json
		self.requestResponseTimeSeconds = "requestResponseTimeSeconds" <~~ json
		self.municipalityAccessFailed = "municipalityAccessFailed" <~~ json
		self.pdfFileNameList = "pdfFileNameList" <~~ json
		self.summaryList = "summaryList" <~~ json
		self.addressList = "addressList" <~~ json
		self.alertList = "alertList" <~~ json
		self.userList = "userList" <~~ json
		self.accountList = "accountList" <~~ json
		self.profileInfoList = "profileInfoList" <~~ json
		self.complaintTypeList = "complaintTypeList" <~~ json
		self.complaintCategoryList = "complaintCategoryList" <~~ json
		self.complaintList = "complaintList" <~~ json
		self.alertTypeList = "alertTypeList" <~~ json
		self.cityList = "cityList" <~~ json
		self.complaintUpdateStatusList = "complaintUpdateStatusList" <~~ json
		self.countryList = "countryList" <~~ json
		self.customerStatusList = "customerStatusList" <~~ json
		self.customerTypeList = "customerTypeList" <~~ json

		self.municipalityList = "municipalityList" <~~ json

		self.faqList = "faqList" <~~ json
		self.faqTypeList = "faqTypeList" <~~ json
	}

	// MARK: - functions to conform to Mappable protocol

	required init?(_ map: Map) {
	}

	func mapping(map: Map) {
		statusCode <- map["statusCode"]
		goodResponses <- map["goodResponses"]
		badResponses <- map["badResponses"]
		message <- map["message"]
		sessionID <- map["sessionID"]
		gcmRegistrationID <- map["gcmRegistrationID"]
		log <- map["log"]
		data <- map["data"]
		pdfHashMap <- map["pdfHashMap"]
		requestResponseTimeSeconds <- map["requestResponseTimeSeconds"]
		municipalityAccessFailed <- map["municipalityAccessFailed"]
		pdfFileNameList <- map["pdfFileNameList"]
		addressList <- map["addressList"]
		alertList <- map["alertList"]
		userList <- map["userList"]
		accountList <- map["accountList"]
		profileInfoList <- map["profileInfoList"]
		complaintTypeList <- map["complaintTypeList"]
		complaintCategoryList <- map["complaintCategoryList"]
		complaintList <- map["complaintList"]
		alertTypeList <- map["alertTypeList"]
		cityList <- map["cityList"]
		complaintUpdateStatusList <- map["complaintUpdateStatusList"]
		countryList <- map["countryList"]
		customerStatusList <- map["customerStatusList"]
		customerTypeList <- map["customerTypeList"]
		municipalityList <- map["municipalityList"]

		faqList <- map["faqList"]
		faqTypeList <- map["faqTypeList"]
		summaryList <- map["summaryList"]
	}
	func getJSON() -> String {
		let string = Mapper().toJSONString(self, prettyPrint: false)
		return string!;
	}
}
